Matrix: RxC

Have Sum on path from 0, 0 to R-1, C-1
Move Right or DOWN

1 2 3
6 5 1
7 9 2

Sum = 19

Bottom-Up DP.

int dp[][][];
boolean hasSumPathTDDP(int m[][], int i, int j, int sum){

    if(dp[i][j]!=-1)
        return dp[i][j][sum];
    boolean rightAns = hasSumPathHelper(m, i, j+1, sum-m[i][j]);
    if(rightAns)
        return dp[i][j][sum] = true;
    boolean downAns = hasSumPathHelper(m, i+1, j, sum-m[i][j]);
    return dp[i][j][sum] = downAns;
}


boolean hasSumPathHelper(int m[][], int i, int j, int sum){

    boolean rightAns = hasSumPathHelper(m, i, j+1, sum-m[i][j]);
    if(rightAns)
        return true;
    boolean downAns = hasSumPathHelper(m, i+1, j, sum-m[i][j]);
    return downAns;
}

boolean hasSumPath(int m[][], int sum)
{
    return hasSumPathHelper(m, 0, 0, sum);
}







1 2 3
6 5 1
7 9 2


int m[][];
int R, C;

int maxSumHelper(int i, int j){
    // Base
    // Boundary

    return max(maxSumHelper(i+1, j), 
        maxSumHelper(i, j+1));
}


1.  Declare DP MATRIX of size (var in Recursion)
2.  Init with -1 (DP)
3.  Store the answer before returning 
4.  If answer is calculated earlier, return that.

MEMOIZATION
    - Recursion + Memory/Table


Bottom Up

1 2 3
6 5 1
7 9 2

(i,j) Max sum from you to END

25 18 6
24 16 3
18 11 2


h(i, j) = Max( h(i+1, j), h(i, j+1))
h(r-1, c-1) = m[r-1][c-1]


fib(n) = fib(n-1) + fib(n-2)
fib(0) = 0
fib(1) = 1

0 1 1 0 0 0 0 

CONTEST LINK
https://www.hackerrank.com/bz-cci-28-1




///////////

import java.util.*;


class Edge{
 	int v, w;  
  	public Edge(int v, int w){
     	this.v = v;
        this.w = w;
    }
}

class PQEdge implements Comparable<PQEdge>{
 	int u, v, w;  
  	public PQEdge(int u, int v, int w){
        this.u = u;
     	this.v = v;
        this.w = w;
    }
  	public String toString(){
      	return "("+u+" "+v+" "+w+")";
    }
  	public int compareTo(PQEdge e){
    	// this   e  
      	if(this.w != e.w)
      		return this.w - e.w;
      	return this.u - e.u;      
    }
}

public class Test 
{
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
      	int t = sc.nextInt();
      	while(t-- > 0){
          int nv = sc.nextInt();
          int ne = sc.nextInt();
          
          HashMap<Integer, ArrayList<Edge>> g = new HashMap<>();
          for(int i=0; i<nv; i++){
           	g.put(i, new ArrayList<>());            
          }
          
          for(int i=0; i<ne; i++){
            int u = sc.nextInt();
            int v = sc.nextInt();
            int w = sc.nextInt();
            
            g.get(u).add(new Edge(v, w));
            g.get(v).add(new Edge(u, w));            
          }
          
          PriorityQueue<PQEdge> pq = new PriorityQueue<>();
          for(int u=0; u<nv; u++){
            ArrayList<Edge> adjListOfU = g.get(u);
            for(Edge e: adjListOfU){
             	 int v = e.v;
              	 int w = e.w;
              	 if(u < v){
                  	pq.add(new PQEdge(u, v, w)); 
                 }               
            } 
          }
          
          while(!pq.isEmpty()){
           	System.out.print(pq.remove() + " ");           
          }
          
          
          
        }
		
	}
}

//////////



ans(s, d) = 1 +  MIN(for all adjS u ans(u, d))
ans(s, s) = 0
ans(d, d) = 0 



fib(n) = fib(n-1) + fib(n-2)
fib(0) = 0 
fib(1) = 1



map<int, vector<int> > g;

int shortestPathLength(int i, int j){
    // if i==j, return fixed 0 ;
    // finalAns = MAX_INT
    // for every adj vertex u of i
        // neAns = MAX_INT
        // neAns = min(neAns, shortestPathLength(u, j))
        // if(neAns+1 < finalAns)
                finalAns = neAns + 1;

    // return finalAns;
}

Time Complexity Of DFS = for Every Vertex explore all its edges
                       = V * E
Space Complexity = O(V) 



Space : O(V) 
Time: V * E


